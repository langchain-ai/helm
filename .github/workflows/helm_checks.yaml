name: Lint and Test Charts

on:
  push:
    branches: [main]
  pull_request:
  workflow_dispatch:

jobs:
  lint-test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        chart-name: [ "langgraph-cloud", "langsmith" ]

    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Set up Helm
        uses: azure/setup-helm@v3
        with:
          version: v3.12.1

      - uses: actions/setup-python@v4
        with:
          python-version: '3.9'
          check-latest: true

      - name: Set up chart-testing
        uses: helm/chart-testing-action@v2.6.0

      - name: Add Helm Repositories
        run: |
          helm repo add langchain https://langchain-ai.github.io/helm/
          helm repo update

      - name: Run chart-testing (lint)
        run: ct lint --target-branch ${{ github.event.repository.default_branch }} --charts charts/${{ matrix.chart-name }}

      - name: Install Helm Unittest
        run: helm plugin install https://github.com/helm-unittest/helm-unittest.git --version 0.7.0

      - name: Run chart unittest
        run: helm unittest charts/${{ matrix.chart-name }}

      - name: Create kind cluster
        uses: helm/kind-action@v1.7.0

      - name: Pre-pull and load external images into kind
        run: |
          docker pull docker.io/redis:7
          kind load docker-image docker.io/redis:7 --name chart-testing

          docker pull docker.io/postgres:14.7
          kind load docker-image docker.io/postgres:14.7 --name chart-testing

          docker pull docker.io/clickhouse/clickhouse-server:25.4
          kind load docker-image docker.io/clickhouse/clickhouse-server:25.4 --name chart-testing

      - name: Setup Redis with TLS for Custom CA Testing (LangSmith only)
        if: matrix.chart-name == 'langsmith'
        run: |
          set -e
          echo "=== Creating self-signed certificate for Redis ==="
          
          # Generate private key and certificate
          openssl genrsa -out /tmp/redis.key 2048
          openssl req -new -x509 -key /tmp/redis.key -out /tmp/redis.crt -days 365 \
            -subj "/C=US/ST=CA/L=SF/O=Test/CN=redis-tls-master.default.svc.cluster.local"
          
          # Create Kubernetes secrets
          kubectl create secret generic redis-tls-secret \
            --from-file=tls.crt=/tmp/redis.crt \
            --from-file=tls.key=/tmp/redis.key \
            --from-file=ca.crt=/tmp/redis.crt \
            --namespace default
          
          kubectl create secret generic langsmith-custom-ca \
            --from-file=ca-bundle.crt=/tmp/redis.crt \
            --namespace default
          
          echo "=== Installing Redis with TLS via Bitnami Helm chart ==="
          helm repo add bitnami https://charts.bitnami.com/bitnami
          helm repo update
          
          helm install redis-tls bitnami/redis \
            --namespace default \
            --set auth.enabled=false \
            --set master.persistence.enabled=false \
            --set replica.replicaCount=0 \
            --set tls.enabled=true \
            --set tls.authClients=false \
            --set tls.autoGenerated=false \
            --set tls.existingSecret=redis-tls-secret \
            --set tls.certFilename=tls.crt \
            --set tls.certKeyFilename=tls.key \
            --set tls.certCAFilename=ca.crt \
            --set master.resources.requests.cpu=50m \
            --set master.resources.requests.memory=64Mi \
            --timeout 5m \
            --wait
          
          echo "=== Redis with TLS ready for testing ==="

      - name: Run chart-testing (install)
        env:
          LANGSMITH_LICENSE_KEY: ${{ secrets.LANGSMITH_LICENSE_KEY }}
          LANGGRAPH_CLOUD_LICENSE_KEY: ${{ secrets.LANGGRAPH_CLOUD_LICENSE_KEY }}
        run: ct install --target-branch ${{ github.event.repository.default_branch }} --charts charts/${{ matrix.chart-name }} --namespace default --helm-extra-set-args "--timeout=15m --set=frontend.service.type=ClusterIP --set=config.langsmithLicenseKey=$LANGSMITH_LICENSE_KEY --set=apiServer.service.type=ClusterIP --set=studio.service.type=ClusterIP --set=redis.statefulSet.resources.requests.cpu=50m --set=redis.statefulSet.resources.requests.memory=64Mi --set=postgres.statefulSet.resources.requests.cpu=100m --set=postgres.statefulSet.resources.requests.memory=256Mi --set=clickhouse.statefulSet.resources.requests.cpu=200m --set=clickhouse.statefulSet.resources.requests.memory=512Mi"

# Default values for the langgraph-operator helm chart. Refer to documentation on individual values for help with configuration.

# -- Provide a name in place of `langgraphOperator`
nameOverride: ""
# -- String to fully override `"langgraphOperator.fullname"`
fullnameOverride: ""
# -- Annotations that will be applied to all resources created by the chart
commonAnnotations: {}
# -- Labels that will be applied to all resources created by the chart
commonLabels: {}
# -- Common environment variables that will be applied to all deployments
commonEnv: []

images:
   # -- Secrets with credentials to pull images from a private registry. Specified as name: value.
  imagePullSecrets: []
  operatorImage:
    repository: "docker.io/langchain/langgraph-operator"
    pullPolicy: IfNotPresent
    tag: "fb9e98d"

config:
  createCRDs: true
  watchNamespaces: ""
  kedaEnabled: true

manager:
  name: "manager"
  deployment:
    autoRestart: true
    replicas: 1
    labels: {}
    annotations: {}
    podSecurityContext: {}
    securityContext: {}
    resources:
      limits:
        cpu: 2000m
        memory: 4Gi
      requests:
        cpu: 1000m
        memory: 2Gi
    extraContainerConfig: {}
    extraEnv: []
    sidecars: []
    nodeSelector: {}
    tolerations: []
    topologySpreadConstraints: []
    affinity: {}
    volumes: []
    volumeMounts: []
    terminationGracePeriodSeconds: 30
  pdb:
    enabled: false
    minAvailable: 1
  serviceAccount:
    create: true
    name: ""
    labels: {}
    annotations: {}
  rbac:
    create: true
    labels: {}
    annotations: {}
  # These templates are used by the operator as the base spec for creating resources.
  templates:
    deployment: |
      apiVersion: apps/v1
      kind: Deployment
      metadata:
        name: ${name}
        namespace: ${namespace}
      spec:
        replicas: ${replicas}
        selector:
          matchLabels:
            app: ${name}
        template:
          metadata:
            labels:
              app: ${name}
          spec:
            enableServiceLinks: false
            containers:
            - name: api-server
              image: ${image}
              ports:
              - name: api-server
                containerPort: 8000
                protocol: TCP
              livenessProbe:
                httpGet:
                  path: /ok?check_db=1
                  port: 8000
                initialDelaySeconds: 90
                periodSeconds: 5
                timeoutSeconds: 5
              readinessProbe:
                httpGet:
                  path: /ok
                  port: 8000
                initialDelaySeconds: 90
                periodSeconds: 5
                timeoutSeconds: 5
    service: |
      apiVersion: v1
      kind: Service
      metadata:
        name: ${name}
        namespace: ${namespace}
      spec:
        type: ClusterIP
        selector:
          app: ${name}
        ports:
        - name: api-server
          protocol: TCP
          port: 8000
          targetPort: 8000
    ingress: |
      apiVersion: networking.k8s.io/v1
      kind: Ingress
      metadata:
        name: ${name}
        namespace: ${namespace}
      spec:
        ingressClassName: ${ingress.ingressClassName}
        rules:
        - host: ${ingress.hostname}
          http:
            paths:
            - path: /
              pathType: Prefix
              backend:
                service:
                  name: ${name}
                  port:
                    number: 8000
    databaseStatefulSet: |
      apiVersion: apps/v1
      kind: StatefulSet
      metadata:
        name: ${database.name}
        namespace: ${namespace}
      spec:
        serviceName: ${database.name}
        selector:
          matchLabels:
            app: ${database.name}
        template:
          metadata:
            labels:
              app: ${database.name}
          spec:
            enableServiceLinks: false
            containers:
              - name: postgres
                image: docker.io/pgvector/pgvector:pg15
                ports:
                  - containerPort: 5432
                command: ["docker-entrypoint.sh"]
                args:
                  - postgres
                  - -c
                  - max_connections=${database.maxConnections}
                env:
                  - name: POSTGRES_USER
                    value: postgres
                  - name: POSTGRES_DB
                    value: postgres
                  - name: POSTGRES_PASSWORD
                    valueFrom:
                      secretKeyRef:
                        name: ${database.secretName}
                        key: POSTGRES_PASSWORD
                volumeMounts:
                  - name: postgres-data
                    mountPath: /var/lib/postgresql/data
        volumeClaimTemplates:
          - metadata:
              name: postgres-data
            spec:
              accessModes: ["ReadWriteOnce"]
              resources:
                requests:
                  storage: "${database.storageSizeGi}Gi"
    databaseService: |
      apiVersion: v1
      kind: Service
      metadata:
        name: ${database.name}
        namespace: ${namespace}
      spec:
        selector:
          app: ${database.name}
        ports:
          - port: 5432
            targetPort: 5432
        clusterIP: None
    redisDeployment: |
      apiVersion: apps/v1
      kind: Deployment
      metadata:
        name: ${redis.name}
        namespace: ${namespace}
      spec:
        replicas: 1
        selector:
          matchLabels:
            app: ${redis.name}
        template:
          metadata:
            labels:
              app: ${redis.name}
          spec:
            enableServiceLinks: false
            containers:
            - name: redis
              image: docker.io/redis:7
              ports:
              - containerPort: 6379
                name: redis
              livenessProbe:
                exec:
                  command:
                  - redis-cli
                  - ping
                initialDelaySeconds: 30
                periodSeconds: 10
              readinessProbe:
                tcpSocket:
                  port: 6379
                initialDelaySeconds: 10
                periodSeconds: 5
    redisService: |
      apiVersion: v1
      kind: Service
      metadata:
        name: ${redis.name}
        namespace: ${namespace}
        labels:
          app: ${redis.name}
      spec:
        ports:
        - port: 6379
          targetPort: 6379
          protocol: TCP
          name: redis
        selector:
          app: ${redis.name}
        type: ClusterIP





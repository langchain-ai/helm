{{- if .Values.config.fullTextSearch.indexing.enabled -}}
---
apiVersion: batch/v1
kind: Job
metadata:
  name: {{ include "langsmith.fullname" . }}-{{.Values.quickwit.updateRunsIndex.name }}
  labels:
    {{- include "quickwit.labels" . | nindent 4 }}
    app.kubernetes.io/component: {{ include "langsmith.fullname" . }}-{{.Values.quickwit.updateRunsIndex.name }}
  annotations:
    {{- include "quickwit.annotations" . | nindent 4 }}
    helm.sh/hook: post-install,post-upgrade
    helm.sh/hook-delete-policy: before-hook-creation,hook-succeeded
    helm.sh/hook-weight: "3"
spec:
  template:
    metadata:
      name: {{ include "langsmith.fullname" . }}-{{.Values.quickwit.updateRunsIndex.name }}
      labels:
        {{- include "quickwit.labels" . | nindent 8 }}
        app.kubernetes.io/component: {{ include "langsmith.fullname" . }}-{{.Values.quickwit.updateRunsIndex.name }}
    spec:
      serviceAccountName: {{ include "quickwit.serviceAccountName" . }}
      restartPolicy: Never
      initContainers:
      - name: backend
        image: "{{ .Values.images.backendImage.repository }}:{{ .Values.images.backendImage.tag | default .Chart.AppVersion }}"
        command: ["/bin/sh"]
        args:
          - "-c"
          - |
            process_mapping() {
              local mapping_file="$1"
              local retention_period="$2"
              local partition_key="{{ .Values.quickwit.partitionKey }}"

              echo "Processing mapping file: ${mapping_file}"
              cat /code/smith-backend/quickwit/${mapping_file} | \
              yq ".retention.period = \"${retention_period}\" | .doc_mapping.partition_key = \"${partition_key}\"" > /quickwit/${mapping_file}
            }

            set -e
            process_mapping "runs-index-default.yaml" "{{- include "langsmith.quickwit-short-ttl" . -}}"
            process_mapping "runs-index-long-ttl.yaml" "{{- include "langsmith.quickwit-long-ttl" . -}}"

        volumeMounts:
        - name: index-data
          mountPath: /quickwit
      containers:
      - name: {{ .Values.quickwit.name }}
        image: "{{ .Values.images.quickwitImage.repository }}:{{ .Values.images.quickwitImage.tag }}"
        imagePullPolicy: {{ $.Values.images.quickwitImage.pullPolicy }}
        command: ["/bin/bash"]

        # Logic here - "describe" && "update" || "create"
        args:
          - "-c"
          - |
            process_index() {
              local index_name="$1"
              local config_file="$2"
              echo "Processing index: ${index_name} with config: ${config_file}"

              if quickwit index describe --index ${index_name} --endpoint ${QW_CLUSTER_ENDPOINT} > /dev/null 2>&1; then
                echo "Index ${index_name} exists, updating..."
                quickwit index update --index ${index_name} --index-config ${config_file} --yes --endpoint ${QW_CLUSTER_ENDPOINT}
              else
                echo "Index ${index_name} does not exist, creating..."
                quickwit index create --index-config ${config_file} --endpoint ${QW_CLUSTER_ENDPOINT}
              fi
              echo "Successfully processed index: ${index_name}"
            }

            set -e
            process_index runs           runs-index-default.yaml
            process_index runs-long-ttl  runs-index-long-ttl.yaml

        env:
        - name: QW_CLUSTER_ENDPOINT
          value: {{ include "langsmith.quickwit-cluster-endpoint" . }}
        volumeMounts:
          - name: config
            mountPath: /quickwit/node.yaml
            subPath: node.yaml
        volumeMounts:
          - name: index-data
            mountPath: /quickwit
      volumes:
        - name: config
          configMap:
            name: {{ include "quickwit.configMapName" . }}
            items:
              - key: node.yaml
                path: node.yaml
        - name: index-data
          emptyDir: {}
{{- end }}
